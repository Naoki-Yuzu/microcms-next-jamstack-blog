import Pagination from '@/components/pagination';
import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head'
import Image from 'next/image'
import Link from "next/link";
import { client } from "../../libs/client";
import { Blog } from "../../types/blog";

// const PER_PAGE = 5;

// type Props = {
//   blog: Array<Blog>;
//   totalCount: number;
// };

type Props = {
  blog: Blog;
};

// 静的生成のためのパスを指定します
export const getStaticPaths: GetStaticPaths = async () => {
  const data = await client.get({ endpoint: "blog" });
  const blog: Blog[] = data.contents

  const paths = blog.map((content) => `/blog/${content.id}`);
  return { paths, fallback: false };
};

// データをテンプレートに受け渡す部分の処理を記述します
export const getStaticProps: GetStaticProps  = async (context) => {
  const id = context.params?.id;
  const idExceptArray = id instanceof Array ? id[0] : id;
  const data = await client.get({ endpoint: "blog", contentId: idExceptArray });

  return {
    props: {
      blog: data,
    },
  };
};

const BlogId = ({blog}: Props) => {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-3 flex flex-col justify-center items-center">
        <h1>{blog.title}</h1>
        <p>{blog.publishedAt}</p>
        <div className="prose"
        dangerouslySetInnerHTML={{
          __html: `${blog.body}`,
        }}
        />
    </main>
    </>
  )
}

export default BlogId;

// export const getStaticPaths = async () => {
//   const repos = await client.get({ endpoint: "blog" });

//   const range = (start: number, end: number) => [...Array(end - start + 1)].map((_, i) => start + i);

//   const paths = range(1, Math.ceil(repos.totalCount / PER_PAGE)).map((repo) => `/blog/page/${repo}`);

//   return { paths, fallback: false };
// };

// export const getStaticProps = async (context: any) => {
//   const id = context.params.id;
//   const data = await client.get({ endpoint: "blog", queries: { offset: (id - 1) * 5, limit: 5 } });

//   return {
//     props: {
//       blog: data.contents,
//       totalCount: data.totalCount,
//     },
//   };
// }

// const BlogPageId = ({blog, totalCount}: Props) => {
//   console.log(blog)

//   return (
//     <div>
//       <ul>
//         {blog.map(blog => (
//           <li key={blog.id}>
//             <Link href={`/blog/${blog.id}`}>{blog.title}</Link>
//           </li>
//         ))}
//       </ul>
//       <Pagination totalCount={totalCount}/>
//     </div>
//   )
// }

// export default BlogPageId;